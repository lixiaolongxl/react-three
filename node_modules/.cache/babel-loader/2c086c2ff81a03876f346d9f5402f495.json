{"ast":null,"code":"var _jsxFileName = \"/Users/lixiaolong/Desktop/react-thtee/src/index.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport React, { useRef, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Box(props) {\n  _s();\n\n  // This reference gives us direct access to the THREE.Mesh object\n  const ref = useRef(); // Hold state for hovered and clicked events\n\n  const [hovered, hover] = useState(false);\n  const [clicked, click] = useState(false); // Subscribe this component to the render-loop, rotate the mesh every frame\n\n  useFrame((state, delta) => ref.current.rotation.x += 0.01); // Return the view, these are regular Threejs elements expressed in JSX\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", { ...props,\n    ref: ref,\n    scale: clicked ? 1.5 : 1,\n    onClick: event => click(!clicked),\n    onPointerOver: event => hover(true),\n    onPointerOut: event => hover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: hovered ? 'hotpink' : 'orange'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Box, \"z4ku1cFD3MTB1blzCtJiPqYRyRY=\", false, function () {\n  return [useFrame];\n});\n\n_c = Box;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Canvas, {\n  children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n    position: [10, 10, 10]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(Box, {\n    position: [-1.2, 0, 0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(Box, {\n    position: [1.2, 0, 0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 32,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"Box\");","map":{"version":3,"sources":["/Users/lixiaolong/Desktop/react-thtee/src/index.js"],"names":["ReactDOM","React","useRef","useState","Canvas","useFrame","App","reportWebVitals","Box","props","ref","hovered","hover","clicked","click","state","delta","current","rotation","x","event","render","document","getElementById"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,oBAAjC;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AACA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB;AACA,QAAMC,GAAG,GAAGR,MAAM,EAAlB,CAFkB,CAGlB;;AACA,QAAM,CAACS,OAAD,EAAUC,KAAV,IAAmBT,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAM,CAACU,OAAD,EAAUC,KAAV,IAAmBX,QAAQ,CAAC,KAAD,CAAjC,CALkB,CAMlB;;AACAE,EAAAA,QAAQ,CAAC,CAACU,KAAD,EAAQC,KAAR,KAAmBN,GAAG,CAACO,OAAJ,CAAYC,QAAZ,CAAqBC,CAArB,IAA0B,IAA9C,CAAR,CAPkB,CAQlB;;AACA,sBACE,qBACMV,KADN;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,KAAK,EAAEG,OAAO,GAAG,GAAH,GAAS,CAHzB;AAIE,IAAA,OAAO,EAAGO,KAAD,IAAWN,KAAK,CAAC,CAACD,OAAF,CAJ3B;AAKE,IAAA,aAAa,EAAGO,KAAD,IAAWR,KAAK,CAAC,IAAD,CALjC;AAME,IAAA,YAAY,EAAGQ,KAAD,IAAWR,KAAK,CAAC,KAAD,CANhC;AAAA,4BAOE;AAAa,MAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAnB;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAsB,MAAA,KAAK,EAAED,OAAO,GAAG,SAAH,GAAe;AAAnD;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GArBQH,G;UAOPH,Q;;;KAPOG,G;AAuBTR,QAAQ,CAACqB,MAAT,eACE,QAAC,MAAD;AAAA,0BACA;AAAA;AAAA;AAAA;AAAA,UADA,eAEA;AAAY,IAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT;AAAtB;AAAA;AAAA;AAAA;AAAA,UAFA,eAGA,QAAC,GAAD;AAAK,IAAA,QAAQ,EAAE,CAAC,CAAC,GAAF,EAAO,CAAP,EAAU,CAAV;AAAf;AAAA;AAAA;AAAA;AAAA,UAHA,eAIA,QAAC,GAAD;AAAK,IAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT;AAAf;AAAA;AAAA;AAAA;AAAA,UAJA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAOEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF,E,CAUA;AACA;AACA;;AACAhB,eAAe","sourcesContent":["// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nfunction Box(props) {\n  // This reference gives us direct access to the THREE.Mesh object\n  const ref = useRef()\n  // Hold state for hovered and clicked events\n  const [hovered, hover] = useState(false)\n  const [clicked, click] = useState(false)\n  // Subscribe this component to the render-loop, rotate the mesh every frame\n  useFrame((state, delta) => (ref.current.rotation.x += 0.01))\n  // Return the view, these are regular Threejs elements expressed in JSX\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={clicked ? 1.5 : 1}\n      onClick={(event) => click(!clicked)}\n      onPointerOver={(event) => hover(true)}\n      onPointerOut={(event) => hover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nReactDOM.render(\n  <Canvas>\n  <ambientLight />\n  <pointLight position={[10, 10, 10]} />\n  <Box position={[-1.2, 0, 0]} />\n  <Box position={[1.2, 0, 0]} />\n</Canvas>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}